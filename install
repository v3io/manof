#!/usr/bin/env python

import os
import sys
import argparse
import subprocess


def run(command):
    subprocess.check_call(['/bin/bash', '-c', command],
                          stdout=sys.stdout, stderr=sys.stderr)


def register_arguments():
    parser = argparse.ArgumentParser()

    parser.add_argument('-o', '--offline-install-path', help='The dir path to install pip packages from.')
    parser.add_argument('--no-link', action='store_true',
                        help='Do not remove or create symlink')
    parser.add_argument('--dev', action='store_true',
                        help='Install dev requirements in addition to common requirements')

    return parser.parse_args()


def _create_sym_link():

    # symlink to run
    ln_cmd = 'ln -sfF {0}/run /usr/local/bin/manof'.format(os.getcwd())

    # first try without sudo, then with
    try:
        run(ln_cmd)
    except subprocess.CalledProcessError:
        run('sudo {0}'.format(ln_cmd))


def main():
    args = register_arguments()
    if args.offline_install_path is None:
        local_pip_packages = ''
    else:
        local_pip_packages = '--no-index --find-links=file:{}'.format(
            args.offline_install_path)

    retval = 0
    try:
        requirements_file = 'requirements.txt'
        if args.dev:
            requirements_file = 'requirements_all.txt'

        # create venv, activate it and install requirements to it
        # (from a local dir if it exists)
        # "python -m pip install" instead of "pip install" handles a pip
        # issue where it fails in a long-named dir
        run('virtualenv venv && source venv/bin/activate && '
            'python -m pip install {0} incremental && '.format(local_pip_packages) +
            'python -m pip install {0} -r {1}'.format(
                local_pip_packages, requirements_file))

        if not args.no_link:
            _create_sym_link()
    except subprocess.CalledProcessError as e:
        retval = e.returncode
    else:
        print 'Installation complete. Enjoy your manof!'

    sys.exit(retval)


if __name__ == '__main__':
    main()
